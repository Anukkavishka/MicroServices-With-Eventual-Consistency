#shipping-service-----------------------------------------
server.port:8083
# Enabling H2 Console
spring.h2.console.enabled=true



#default 
spring.cloud.stream.kafka.binder.autoCreateTopics=true
spring.cloud.stream.kafka.binder.minPartitionCount=6
spring.cloud.stream.kafka.binder.autoAddPartitions=true
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.mms=1000
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=com.simple.stockservice.serde.Deser
#in abive you have to provide a custom serializer for the Order event object

#order output stream by stock-service
#the rollback triggred orderevent channel to the stock-service orderrollback
spring.cloud.stream.bindings.rollback.destination=orderrollback
spring.cloud.stream.bindings.rollback.producer.header-mode=raw
spring.cloud.stream.kafka.streams.bindings.rollback.producer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.rollback.producer.value-serde=com.simple.shippingservice.serde.Seri



#order validated info input stream from stock-service
#change the serde path
spring.cloud.stream.bindings.ordersIn.destination=stkout
spring.cloud.stream.bindings.ordersIn.consumer.header-mode=raw
spring.cloud.stream.kafka.streams.bindings.ordersIn.consumer.key-serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.ordersIn.consumer.value-serde=com.simple.shippingservice.serde.Deser


#order info input stream from order-service to rollback the stock changes


